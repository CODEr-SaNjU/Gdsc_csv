import math
from multiprocessing.util import _exit_function

import pandas as pd

from tkinter import *
import progressbar
import os
import re
import docx
from docx.oxml import OxmlElement
from docx.oxml.ns import qn
from tkinter import ttk
from tkinter import filedialog
from tkinter import messagebox
from datetime import datetime

from numpy import number



dict1 = {}
file_name = r'/home/coder-sanju/Desktop/Gdsc_project/Gdsc_csv/Gdsc_csv/Gdsc_csv/media/Python_Beam_moment_splice_v4_cecVKqc.e2k'
def createsubfiles(file_name):
    fulfile = open(file_name, 'r')  # giving filename

    fulread = fulfile.readlines()
    for i in range(len(fulread)):
        if i == 0:
            dict1['filepath'] = fulread[i]

        else:
            if '$' == fulread[i][0]:
                if '/' in fulread[i]:
                    filenam = fulread[i].replace("/", " ")
                    dict1[filenam[0:-1]] = []
                else:
                    filenam = fulread[i]
                    dict1[filenam[0:-1]] = []

                for j in range(i, len(fulread)):
                    if j < len(fulread) - 1:
                        if '$' in fulread[j + 1]:
                            break
                        else:
                            dict1[filenam[0:-1]].append(fulread[j])
                    else:
                        dict1[filenam[0:-1]].append(fulread[j])


x = createsubfiles(file_name)
# Control_filelist = open('$ CONTROLS', 'r')
Control_filelist1 = dict1['$ CONTROLS']
for line in range(2):
    if 'UNITS' in Control_filelist1[line]:
        Force_unit = Control_filelist1[line].split()[1].strip('""')
        Length_unit = Control_filelist1[line].split()[2].strip('""')
        break

print(Control_filelist1)

import pandas as pd
import numpy as np

unitforforces_df = pd.DataFrame({'LB': [1, 1000, 224.8089424, 2.204622629, 0.224808942, 2204.622622],
                                    'KIP': [0.001, 1, 0.224808944, 2204.622629, 0.000224809, 2.204622622],
                                    'KN': [0.004448222, 4.448221628, 1, 0.00980665, 0.001, 9.80665],
                                    'KGF': [0.454, 453.5923713, 101.9716213, 1, 0.101971621, 1000],
                                    'N': [4.448, 4448.22, 1000, 9.80665, 1, 9806.65],
                                    'TONF': [0.000446429, 0.446429, 0.101971621, 0.001, 0.000101972, 1]},
                                index=['LB', 'KIP', 'KN', 'KGF', 'N', 'TONF'])

forcefactor = unitforforces_df.loc[Force_unit, 'N']
KGfactor = unitforforces_df.loc[Force_unit, 'KGF']

unitforlength_df = pd.DataFrame({'IN': [1, 12, 0.039370079, 0.3937007874, 0.0000393700787401575, 39.37007874],
                                    'FT': [0.083333333, 1, 0.00328084, 0.032808399, 0.000003280839895, 3.280839895],
                                    'MM': [25.4, 304.8, 1, 10, 0.001, 1000],
                                    'CM': [2.54, 30.48, 0.1, 1, 0.0001, 100],
                                    'MICRON': [25400, 304800, 1000, 10000, 1, 1000000],
                                    'M': [0.00254, 0.3048, 0.001, 0.01, 0.000001, 1]},

                                index=['IN', 'FT', 'MM', 'CM', 'MICRON', 'M'])

lengthfactor = unitforlength_df.loc[Length_unit, 'MM']
Metrefactor = unitforlength_df.loc[Length_unit, 'M']

# fulfile = open('$ STORIES - IN SEQUENCE FROM TOP', 'r')  # giving filename
fulread = dict1['$ STORIES - IN SEQUENCE FROM TOP']
global listof_storey
listof_storey = []
listof_height = []

x = 1
for i in range(len(fulread)):
    if '$ STORIES' in fulread[i]:
        x = 0
        for j in range(i + 1, len(fulread)):
            systematic_form = re.sub(" +", " ", fulread[j])
            list1 = systematic_form.split('"')
            if list1[0] == " STORY ":
                listof_storey.append(list1[1])
                listof_height.append(int(list1[2].split()[1]))
            else:
                break

    elif x == 0:
        break
listof_height1 = listof_height.copy()
listof_height.reverse()
heightof_storey = list(np.cumsum(listof_height))
listof_storey.reverse()
df_storeyheigth = {'Storey Name': listof_storey, 'Cumsum Heigth': heightof_storey, 'Floor height': listof_height1}
# print(listof_storey)

# dict for material properties
# materialfile = open('$ MATERIAL PROPERTIES', 'r')
materialfilelines = dict1['$ MATERIAL PROPERTIES']
Name = []
Type = []
E_1 = []
U = []
Unit_Weight = []
Design_Strengths = []
A = []
G = []
Fy = []
Fu = []
Fc = []

x = 0
y = 1
x1 = 0
y1 = 1
for i in range(len(materialfilelines)):
    materiallines = re.sub(' +', ' ', materialfilelines[i])
    materiallineslist = materiallines.split()
    if materiallineslist[0] != '$':
        for j in range(len(materiallineslist)):
            if materiallineslist[j] == 'MATERIAL':
                gridesystem = materiallineslist[j + 1].strip('"')
                if gridesystem not in Name:
                    Name.append(gridesystem)

            elif materiallineslist[j] == 'TYPE':
                TYpe = materiallineslist[j + 1].strip('"')
                Type.append(TYpe)
            elif materiallineslist[j] == 'E':
                e = float(materiallineslist[j + 1])
                E_1.append(e)
            elif materiallineslist[j] == 'A':
                a = float(materiallineslist[j + 1])
                A.append(a)
            elif materiallineslist[j] == 'U':
                u = float(materiallineslist[j + 1])
                U.append(u)
                if gridesystem in ["Masonry", "OTHER", "Aluminum", 'ColdFormed']:
                    x1 += 1
            elif materiallineslist[j] == 'WEIGHTPERVOLUME':
                wt = float(materiallineslist[j + 1])
                Unit_Weight.append(wt)
            elif materiallineslist[j] == 'FC':
                fc = float(materiallineslist[j + 1])
                Fc.append(fc)
                x += 1
            elif materiallineslist[j] == 'FY':
                fy = float(materiallineslist[j + 1])
                Fy.append(fy)
            elif materiallineslist[j] == 'FU':
                fu = float(materiallineslist[j + 1])
                Fu.append(fu)
                x += 1

        if x == y or x1 == y1:

            g = e / (2 * (1 + u))
            G.append(g)
            if TYpe == 'Steel':
                Design_Strengths.append([fy, fu])
                y += 1
            elif TYpe == 'Concrete':
                Design_Strengths.append([fc])
                y += 1
            elif TYpe == 'Rebar':
                u = 0.3
                U.append(u)
                Design_Strengths.append([fy, fu])
                y += 1
            elif TYpe == 'Tendon':
                u = 0
                U.append(u)
                Design_Strengths.append([fy, fu])
                y += 1
            elif TYpe == 'Aluminum':
                Design_Strengths.append([])
                y1 += 1
            elif TYpe == "Coldformed":
                Design_Strengths.append([])
                y1 += 1
            elif TYpe == 'Masonry':
                Design_Strengths.append([])
                y1 += 1
            elif TYpe == 'Other':
                Design_Strengths.append([])
                y1 += 1

    

material_dict = {'NAME': Name, 'TYPE': Type, 'E': E_1, 'U': U, 'UNIT_WT': Unit_Weight,
                    'DESIGN_STRENGTHS': Design_Strengths, 'A': A, 'G': G}

UB_frame_dict = {'DESIGNATION': ['DESIGNATION', 'UB127X76X13', 'UB152X89X16', 'UB178X102X19', 'UB203X102X23', 'UB203X133X25', 'UB203X133X30', 'UB254X146X31', 'UB254X102X22', 'UB254X146X37', 'UB254X102X25', 'UB254X146X43', 'UB254X102X28', 'UB305X165X40', 'UB305X127X37', 'UB305X102X25', 'UB305X165X46', 'UB305X127X42', 'UB305X102X28', 'UB305X165X54', 'UB305X127X48', 'UB305X102X33', 'UB356X127X33', 'UB356X171X45', 'UB356X127X39', 'UB356X171X51', 'UB356X171X57', 'UB356X171X67', 'UB406X140X39', 'UB406X178X54', 'UB406X140X46', 'UB406X178X60', 'UB406X140X53', 'UB406X178X67', 'UB406X178X74', 'UB406X178X85', 'UB457X152X52', 'UB457X191X67', 'UB457X152X60', 'UB457X191X74', 'UB457X152X67', 'UB457X191X82', 'UB457X152X74', 'UB457X191X89', 'UB457X152X82', 'UB457X191X98', 'UB457X191X106', 'UB457X191X133', 'UB457X191X161', 'UB533X165X66', 'UB533X210X82', 'UB533X165X74', 'UB533X210X92', 'UB533X165X85', 'UB533X210X101', 'UB533X210X109', 'UB533X312X150', 'UB533X210X122', 'UB533X210X138', 'UB533X312X182', 'UB533X312X219', 'UB533X312X272', 'UB610X178X82', 'UB610X229X101', 'UB610X178X92', 'UB610X178X100', 'UB610X229X113', 'UB610X229X125', 'UB610X305X149', 'UB610X229X140', 'UB610X305X179', 'UB610X305X238', 'UB686X254X125', 'UB686X254X140', 'UB686X254X152', 'UB686X254X170', 'UB762X267X134', 'UB762X267X147', 'UB762X267X173', 'UB762X267X197', 'UB838X292X176', 'UB838X292X194', 'UB838X292X226', 'UB914X305X201', 'UB914X305X224', 'UB914X419X343', 'UB914X305X238', 'UB914X305X253', 'UB914X419X388', 'UB914X305X271', 'UB914X305X289', 'UB914X305X313', 'UB914X305X345', 'UB914X305X381', 'UB914X305X425', 'UB1016X305X222', 'UB914X305X474', 'UB1016X305X249', 'UB914X305X521', 'UB1016X305X272', 'UB914X305X576', 'UB1016X305X314', 'UB1016X305X349', 'UB1016X305X393', 'UB1016X305X415', 'UB1016X305X437', 'UB1016X305X494', 'UB1016X305X487', 'UB1016X305X642', 'UB1016X305X584', 'UB1016X305X748', 'UB1016X305X883', 'UB1016X305X976', np.nan, np.nan, np.nan, np.nan, np.nan],
                    'M': ['Mass per meter\nW\n(kg/m)', 13, 16, 19, 23.1, 25.1, 30, 31.1, 22, 37, 25.2, 43, 28.3, 40.3, 37, 24.8, 46.1, 41.9, 28.2, 54, 48.1, 32.8, 33, 45, 39, 51, 57, 67.1, 39, 54.1, 46, 60.1, 53.3, 67.1, 74.2, 85.3, 52.3, 67.1, 59.8, 74.3, 67.2, 82, 74.2, 89.3, 82.1, 98.3, 105.8, 133.3, 161.4, 65.7, 82.2, 74.7, 92.1, 84.8, 101, 109, 150.6, 122, 138.3, 181.5, 218.7, 273.2, 81.8, 101.2, 92.2, 100.3, 113, 125.1, 149.2, 139.9, 179, 238.1, 125.2, 140.1, 152.4, 170.2, 133.9, 146.9, 173, 196.8, 175.9, 193.8, 226.5, 200.9, 224.2, 343.3, 238, 253.4, 388, 271, 289.1, 313, 345, 381, 425, 222, 474, 248.7, 521, 272.3, 576, 314.3, 349.4, 392.7, 415.02950000000004, 437, 493.8435, 486.7, 641.816, 583.8045, 748.419, 883.3605, 975.5195, np.nan, np.nan, np.nan, np.nan, np.nan],
                    'D': ['Depth \nD\n(mm)', 127, 152.4, 177.8, 203.2, 203.2, 206.8, 251.4, 254, 256, 257.2, 259.6, 260.4, 303.4, 304.4, 305.1, 306.6, 307.2, 308.7, 310.4, 311, 312.7, 349, 351.4, 353, 355, 358, 363.4, 398, 402.6, 403.2, 406.4, 406.6, 409.4, 412.8, 417.2, 449.8, 453.4, 454.6, 457, 458, 460, 462, 463.4, 465.8, 467.2, 469.2, 480.6, 492, 524.7, 528.3, 529.1, 533.1, 534.9, 536.7, 539.5, 542.5, 544.5, 549.1, 550.7, 560.3, 577.1, 598.6, 602.6, 603, 607.4, 607.6, 612.2, 612.4, 617.2, 620.2, 635.8, 677.9, 683.5, 687.5, 692.9, 750, 754, 762.2, 769.8, 834.9, 840.7, 850.9, 903, 910.4, 911.8, 915, 918.4, 921, 923, 926.6, 932, 943, 951, 961, 970.3, 971, 980.1, 981, 990.1, 993, 999.9, 1008.1, 1015.9, 1020, 1026.1, 1036, 1036.3, 1048, 1056, 1068, 1092, 1108, np.nan, np.nan, np.nan, np.nan, np.nan],
                    'B': ['Width\nB\n(mm)', 76, 88.7, 101.2, 101.8, 133.2, 133.9, 146.1, 101.6, 146.4, 101.9, 147.3, 102.2, 165, 123.4, 101.6, 165.7, 124.3, 101.8, 166.9, 125.3, 102.4, 127, 171.1, 128, 171.5, 172.2, 173.2, 141.8, 177.7, 142.2, 177.9, 143.3, 178.8, 179.5, 181.9, 152.4, 189.9, 152.9, 190.4, 153.8, 191.3, 154.4, 191.9, 155.3, 192.8, 194, 196.7, 199.4, 165.1, 208.8, 165.9, 209.3, 166.5, 210, 210.8, 312, 211.9, 213.9, 314.5, 317.4, 320.2, 177.9, 227.6, 178.8, 179.2, 228.2, 229, 304.8, 230.2, 307.1, 311.4, 253, 253.7, 254.5, 255.8, 264.4, 265.2, 266.7, 268, 291.7, 292.4, 293.8, 303.3, 304.1, 418.5, 305, 305.5, 420.5, 307, 307.7, 309, 308, 310, 313, 300, 316, 300, 319, 300, 322, 300, 302, 303, 304, 305.4, 309, 308.5, 412, 314, 417, 424, 428, np.nan, np.nan, np.nan, np.nan, np.nan],
                    'TW': ['Web Thk\nTw\n(mm)', 4, 4.5, 4.8, 5.4, 5.7, 6.4, 6, 5.7, 6.3, 6, 7.2, 6.3, 6, 7.1, 5.8, 6.7, 8, 6, 7.9, 9, 6.6, 5.8, 7, 6.5, 7.4, 8.1, 9.1, 6.4, 7.7, 6.8, 7.9, 7.9, 8.8, 9.5, 10.9, 7.6, 8.5, 8.1, 9, 9, 9.9, 9.6, 10.5, 10.5, 11.4, 12.6, 15.3, 18, 8.9, 9.6, 9.7, 10.1, 10.3, 10.8, 11.6, 12.7, 12.7, 14.7, 15.2, 18.3, 21.1, 10, 10.5, 10.9, 11.3, 11.1, 11.9, 11.8, 13.1, 14.1, 18.4, 11.7, 12.4, 13.2, 14.5, 12, 12.8, 14.3, 15.6, 14, 14.7, 16.1, 15.1, 15.9, 19.4, 16.5, 17.3, 21.4, 18.4, 19.5, 21.1, 22.1, 24.4, 26.9, 16, 30, 16.5, 33, 16.5, 36.1, 19.1, 21.1, 24.4, 26, 26.9, 31, 30, 34, 36, 39, 45.5, 50, np.nan, np.nan, np.nan, np.nan, np.nan],
                    'TF': ['Flange Thk\nTf\n(mm)', 7.6, 7.7, 7.9, 9.3, 7.8, 9.6, 8.6, 6.8, 10.9, 8.4, 12.7, 10, 10.2, 10.7, 7, 11.8, 12.1, 8.8, 13.7, 14, 10.8, 8.5, 9.7, 10.7, 11.5, 13, 15.7, 8.6, 10.9, 11.2, 12.8, 12.9, 14.3, 16, 18.2, 10.9, 12.7, 13.3, 14.5, 15, 16, 17, 17.7, 18.9, 19.6, 20.6, 26.3, 32, 11.4, 13.2, 13.6, 15.6, 16.5, 17.4, 18.8, 20.3, 21.3, 23.6, 24.4, 29.2, 37.6, 12.8, 14.8, 15, 17.2, 17.3, 19.6, 19.7, 22.1, 23.6, 31.4, 16.2, 19, 21, 23.7, 15.5, 17.5, 21.6, 25.4, 18.8, 21.7, 26.8, 20.2, 23.9, 32, 25.9, 27.9, 36.6, 30, 32, 34.5, 39.9, 43.9, 49, 21.1, 54.1, 26, 58.9, 31, 65, 35.9, 40, 43.9, 46, 49, 54, 54.1, 60, 64, 70, 82, 89.9, np.nan, np.nan, np.nan, np.nan, np.nan],
                    'RR': ['Root Radius\nr\n(mm)', 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 8.9, 8.9, 7.6, 8.9, 8.9, 7.6, 8.9, 8.9, 7.6, 10.2, 12.7, 10.2, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 19.1, 19.1, 24.1, 19.1, 19.1, 24.1, 19.1, 19.1, 19.1, 19.1, 19.1, 19.1, 30, 19.1, 30, 19.1, 30, 19.1, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, np.nan, np.nan, np.nan, np.nan, np.nan],
                    'HW': ['Depth between fillets\nd\n(mm)', 96.6, 121.8, 146.8, 169.4, 172.4, 172.4, 219, 225.2, 219, 225.2, 219, 225.2, 265.2, 265.2, 275.9, 265.2, 265.2, 275.9, 265.2, 265.2, 275.9, 312, 306.6, 312, 306.6, 306.6, 306.6, 355.4, 355.4, 355.4, 355.4, 355.4, 355.4, 355.4, 355.4, 402.6, 402.6, 402.6, 402.6, 402.6, 402.6, 402.6, 402.6, 402.6, 402.6, 402.6, 402.6, 402.6, 476.5, 476.5, 476.5, 476.5, 476.5, 476.5, 476.5, 476.5, 476.5, 476.5, 476.5, 476.5, 476.5, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 605.5, 605.5, 605.5, 605.5, 679, 679, 679, 679, 757.3, 757.3, 757.3, 824.4, 824.4, 799.6, 825, 824.4, 799.6, 825, 824.4, 825, 825, 825, 825, 868.1, 825, 868.1, 825, 868.1, 825, 868.1, 868.1, 868.1, 868.1, 868.1, 868.1, 868.1, 868.1, 868.1, 868.1, 868.1, 868.1, np.nan, np.nan, np.nan, np.nan, np.nan],
                    'IZ': ['Moment of Inertia Ixx\n(cm4)', 473, 834, 1356, 2105, 2340, 2896, 4413, 2841, 5537, 3415, 6544, 4005, 8503, 7171, 4455, 9899, 8196, 5366, 11696, 9575, 6501, 8267, 12195, 10270, 14265, 16168, 19592, 12679, 18893, 15856, 21767, 18454, 24502, 27481, 31874, 21586, 29597, 25717, 33536, 29144, 37268, 32891, 41232, 36806, 45944, 49090, 64058, 79996, 35028, 47539, 41058, 55227, 48631, 61519, 66822, 100633, 76043, 86088, 123222, 150976, 198578, 57487, 77398, 66195, 74145, 88936, 100228, 126738, 113395, 153886, 210333, 119448, 137723, 151811, 171782, 152061, 169871, 206651, 241326, 247120, 280274, 340802, 325254, 376414, 625780, 405900, 436305, 719635, 471400, 504187, 548900, 625300, 696300, 787600, 407961, 885100, 481192, 981300, 553974, 1101300, 644063, 723131, 807503, 853100, 910322, 1028000, 1021884, 1451000, 1246000, 1732000, 2096000, 2349000, np.nan, np.nan, np.nan, np.nan, np.nan],
                    'IY': ['Moment of Inertia Iyy\n(cm4)', 56, 90, 137, 164, 308, 385, 448, 119, 571, 149, 677, 179, 764, 336, 123, 896, 389, 155, 1063, 461, 194, 291, 811, 375, 969, 1109, 1362, 410, 1022, 538, 1203, 635, 1365, 1546, 1831, 645, 1452, 795, 1672, 913, 1871, 1047, 2090, 1185, 2348, 2515, 3350, 4251, 859, 2007, 1040, 2389, 1275, 2692, 2943, 10285, 3388, 3864, 12667, 15589, 20615, 1209, 2917, 1439, 1661, 3437, 3935, 9309, 4509, 11410, 15839, 4385, 5186, 5786, 6633, 4790, 5457, 6852, 8177, 7800, 9068, 11361, 9423, 11236, 39156, 12260, 13301, 45438, 14520, 15597, 17110, 19500, 21910, 25140, 9546, 28580, 11754, 32080, 14004, 36470, 16232, 18460, 20496, 21710, 23447, 26820, 26721, 70280, 33430, 85110, 105000, 118500, np.nan, np.nan, np.nan, np.nan, np.nan],
                    'Rz': ['Radius of gyration Rx\n(cm)', 5.35, 6.41, 7.48, 8.46, 8.56, 8.71, 10.5, 10.1, 10.8, 10.3, 10.9, 10.5, 12.9, 12.3, 11.9, 13, 12.4, 12.2, 13, 12.5, 12.5, 14.1, 14.5, 14.3, 14.8, 14.9, 15.1, 15.9, 16.5, 16.4, 16.8, 16.4, 16.9, 17, 17.1, 17.9, 18.6, 18.3, 18.8, 18.4, 18.8, 18.6, 19, 18.7, 19.1, 19.1, 19.4, 19.7, 20.5, 21.3, 20.8, 21.7, 21.2, 21.9, 21.9, 22.9, 22.1, 22.1, 23.1, 23.3, 23.9, 23.3, 24.3, 23.5, 23.9, 24.7, 24.9, 25.8, 25.1, 25.9, 26.3, 27.2, 27.7, 27.9, 28.1, 29.8, 30, 30.5, 31, 33.2, 33.6, 34.3, 35.7, 36.3, 37.8, 36.6, 36.8, 38.2, 36.9, 37, 37.1, 37.7, 37.9, 38.1, 38, 38.3, 39, 38.5, 40, 38.8, 40.1, 40.3, 40.2, 40.17, 40.4, 40.42, 40.6, 42.13, 40.93, 42.62, 43.160000000000004, 43.480000000000004, np.nan, np.nan, np.nan, np.nan, np.nan],
                    'Ry': ['Radius of gyration Ry\n(cm)', 1.84, 2.1, 2.37, 2.36, 3.1, 3.17, 3.36, 2.06, 3.48, 2.15, 3.52, 2.22, 3.86, 2.67, 1.97, 3.9, 2.7, 2.08, 3.93, 2.74, 2.15, 2.64, 3.75, 2.74, 3.85, 3.9, 3.98, 2.86, 3.84, 3.02, 3.95, 3.05, 3.98, 4.03, 4.1, 3.1, 4.11, 3.22, 4.19, 3.26, 4.22, 3.32, 4.28, 3.36, 4.32, 4.31, 4.43, 4.54, 3.2, 4.38, 3.3, 4.51, 3.44, 4.57, 4.6, 7.32, 4.67, 4.68, 7.4, 7.48, 7.7, 3.37, 4.72, 3.47, 3.58, 4.85, 4.94, 6.98, 5, 7.06, 7.21, 5.22, 5.37, 5.44, 5.51, 5.28, 5.38, 5.56, 5.7, 5.89, 6.05, 6.27, 6.07, 6.27, 9.46, 6.36, 6.42, 9.59, 6.48, 6.51, 6.55, 6.66, 6.72, 6.81, 5.81, 6.88, 6.09, 6.95, 6.35, 7.05, 6.37, 6.44, 6.4, 6.409999999999999, 6.49, 6.529999999999999, 6.57, 9.27, 6.7, 9.45, 9.66, 9.77, np.nan, np.nan, np.nan, np.nan, 5],
                    'Zez': ['Elastic Modulus Ze,x\n(cm4)', 75, 109, 153, 207, 230, 280, 351, 224, 433, 266, 504, 308, 560, 471, 292, 646, 534, 348, 754, 616, 416, 474, 694, 581, 804, 903, 1078, 637, 939, 787, 1071, 908, 1197, 1331, 1528, 960, 1306, 1131, 1468, 1273, 1620, 1424, 1780, 1580, 1967, 2093, 2666, 3252, 1335, 1800, 1552, 2072, 1818, 2292, 2477, 3710, 2793, 3136, 4475, 5389, 6882, 1921, 2569, 2196, 2441, 2927, 3274, 4139, 3674, 4962, 6616, 3524, 4030, 4416, 4958, 4055, 4506, 5422, 6270, 5920, 6668, 8010, 7204, 8269, 13726, 8875, 9501, 15627, 10210, 10883, 11780, 13260, 14650, 16390, 8409, 18230, 9819, 20010, 11190, 22180, 12883, 14346, 15897, 16727.5, 17743, 19845.6, 19722, 27690.8, 23598.5, 32434.5, 38388.3, 42400.7, np.nan, np.nan, np.nan, np.nan, np.nan],
                    'Zey': ['Elastic Modulus  Ze,y\n(cm4)', 15, 20, 27, 32, 46, 57, 61, 23, 78, 29, 92, 35, 93, 54, 24, 108, 63, 31, 127, 74, 38, 45.8, 95, 58.6, 113, 129, 157, 58, 115, 76, 135, 89, 153, 172, 201, 85, 153, 104, 176, 119, 196, 136, 218, 153, 244, 259, 341, 426, 104, 192, 125, 228, 153, 256, 279, 659, 320, 361, 806, 982, 1288, 136, 256, 161, 185, 301, 344, 611, 392, 743, 1017, 347, 409, 455, 519, 362, 412, 514, 610, 535, 620, 773, 621, 739, 1871, 805, 871, 2161, 946, 1014, 1106, 1266, 1414, 1608, 636, 1810, 784, 2012, 934, 2267, 1082, 1223, 1353, 1428.3, 1535, 1735.9, 1732, 3411.7, 2129.3, 4082, 4952.8, 5537.4, np.nan, np.nan, np.nan, np.nan, np.nan],
                    'Zpz': ['Plastic Modulus Ze,x\n(cm4)', 84, 123, 171, 234, 258, 314, 393, 259, 483, 306, 566, 353, 623, 539, 342, 720, 614, 403, 846, 711, 481, 542, 783, 663, 904, 1018, 1219, 733, 1064, 897, 1209, 1040, 1355, 1510, 1742, 1106, 1481, 1298, 1663, 1463, 1842, 1637, 2024, 1822, 2243, 2399, 3080, 3789, 1561, 2059, 1808, 2360, 2107, 2612, 2829, 4142, 3196, 3613, 5030, 6109, 7859, 2252, 2939, 2569, 2844, 3339, 3734, 4625, 4200, 5578, 7517, 4040, 4604, 5047, 5677, 4683, 5195, 6237, 7206, 6836, 7668, 9183, 8352, 9535, 15478, 10220, 10942, 17666, 11780, 12570, 13640, 15340, 17020, 19120, 9808, 21380, 11350, 23590, 12827, 26270, 14850, 16593, 18538, 19570, 20769, 23410, 23208, 32100, 28040, 37880, 45260, 50300, np.nan, np.nan, np.nan, np.nan, np.nan],
                    'Zpy': ['Plastic Modulus Ze,y\n(cm4)', 23, 31, 42, 50, 71, 88, 94, 37, 119, 46, 141, 55, 142, 85, 39, 166, 98, 48, 196, 116, 60, 71.8, 147, 91.6, 174, 199, 243, 91, 179, 118, 209, 139, 237, 267, 313, 134, 238, 163, 272, 187, 304, 213, 339, 241, 379, 406, 535, 672, 166, 300, 200, 355, 243, 399, 436, 1009, 500, 568, 1237, 1514, 1985, 220, 402, 260, 298, 471, 537, 938, 614, 1145, 1575, 544, 640, 712, 813, 571, 648, 809, 960, 843, 974, 1212, 982, 1163, 2889, 1265, 1370, 3340, 1490, 1601, 1752, 2001, 2243, 2559, 1019, 2896, 1244, 3234, 1469, 3655, 1712, 1940, 2167, 2298, 2467, 2818, 2799, 5379, 3475, 6459, 7874, 8839, np.nan, np.nan, np.nan, np.nan, np.nan],
                    'Buckling Parameter u': ['Buckling Parameter u', 0.895, 0.89, 0.888, 0.888, 0.877, 0.881, 0.88, 0.856, 0.89, 0.866, 0.891, 0.874, 0.889, 0.872, 0.846, 0.891, 0.872, 0.859, 0.889, 0.873, 0.866, 0.866, 0.875, 0.873, 0.882, 0.883, 0.887, 0.859, 0.872, 0.872, 0.88, 0.871, 0.88, 0.882, 0.882, 0.86, 0.873, 0.869, 0.878, 0.869, 0.878, 0.873, 0.88, 0.874, 0.881, 0.878, 0.88, 0.882, 0.847, 0.864, 0.853, 0.872, 0.862, 0.874, 0.875, 0.885, 0.877, 0.873, 0.885, 0.884, 0.89, 0.846, 0.865, 0.85, 0.857, 0.872, 0.875, 0.887, 0.876, 0.886, 0.886, 0.863, 0.869, 0.872, 0.873, 0.855, 0.859, 0.865, 0.869, 0.857, 0.863, 0.87, 0.854, 0.861, 0.883, 0.864, 0.866, 0.885, 0.867, 0.867, 0.866, 0.872, 0.872, 0.873, 0.85, 0.872, 0.861, 0.871, 0.873, 0.871, 0.872, 0.872, 0.868, 0.867, 0.868, 0.867, 0.867, 0.867, 0.867, 0.867, 0.867, 0.867, np.nan, np.nan, np.nan, np.nan, np.nan],
                    'J1': ['Torsional Index x', 16.3, 19.6, 22.6, 22.5, 25.6, 21.5, 29.6, 36.4, 24.3, 31.5, 21.2, 27.5, 31, 29.7, 43.4, 27.1, 26.5, 37.4, 23.6, 23.3, 31.6, 42.5, 35.8, 35.3, 31.4, 28.3, 24, 45.9, 37.4, 38, 33.1, 33.4, 30, 27.2, 24.1, 42.8, 37.2, 36.8, 33.4, 33, 30.5, 29.7, 27.9, 27, 25.5, 24.2, 19.4, 16.3, 47, 41.6, 41.1, 36.5, 35.5, 33.2, 30.9, 27.8, 27.6, 25, 23.4, 19.8, 15.9, 45.3, 40.9, 40.4, 36.8, 36.4, 32.9, 32.2, 29.6, 27.3, 21.1, 42.6, 37.7, 34.7, 31.2, 48.7, 44.4, 37.5, 32.8, 46, 41.3, 34.7, 46.8, 41.3, 30.1, 38.6, 36.2, 26.7, 33.9, 31.9, 29.7, 26.4, 24.1, 21.8, 45.7, 19.9, 39.8, 18.4, 35, 16.8, 30.7, 27.9, 25.5, 24.336333396816066, 23.1, 20.938178405078002, 21.1, 18.53776401892361, 18.00768335345537, 16.145411494042094, 14.004619972883805, 12.907050655574654, np.nan, np.nan, np.nan, np.nan, np.nan],
                    'Warping Constant\nH\n(dm6)': ['Warping Constant\nH\n(dm6)', 0.002, 0.0047, 0.0099, 0.0154, 0.0294, 0.0374, 0.066, 0.0182, 0.0857, 0.023, 0.103, 0.028, 0.164, 0.0725, 0.0273, 0.195, 0.0846, 0.0349, 0.234, 0.102, 0.0442, 0.0843, 0.237, 0.11, 0.286, 0.33, 0.412, 0.155, 0.392, 0.207, 0.466, 0.246, 0.533, 0.608, 0.729, 0.311, 0.705, 0.387, 0.818, 0.448, 0.922, 0.518, 1.04, 0.592, 1.18, 1.27, 1.73, 2.25, 0.566, 1.33, 0.691, 1.6, 0.857, 1.81, 1.99, 7.01, 2.32, 2.67, 8.77, 11, 15, 1.04, 2.52, 1.24, 1.45, 2.99, 3.45, 8.18, 3.99, 10.2, 14.5, 4.8, 5.72, 6.43, 7.43, 6.46, 7.4, 9.4, 11.3, 13, 15.2, 19.3, 18.4, 22.1, 75.8, 24.2, 26.4, 88.9, 28.9, 31.2, 34.4, 39.7, 45, 52.3, 21.5, 60.1, 26.8, 68.1, 32.2, 78.5, 37.7, 43.3, 48.4, 51.0840421, 56, 51.0840421, 64.4, 51.0840421, 51.0840421, 51.0840421, 51.0840421, 51.0840421, np.nan, np.nan, np.nan, np.nan, np.nan],
                    'J2': ['Torsional Constant \nJ\n(cm4)', 2.85, 3.56, 4.41, 7.02, 5.96, 10.3, 8.55, 4.15, 15.3, 6.42, 23.9, 9.57, 14.7, 14.8, 4.77, 22.2, 21.1, 7.4, 34.8, 31.8, 12.2, 8.59, 16.9, 15.1, 25.1, 34.9, 57.7, 11.6, 24.3, 20.2, 34.8, 30.4, 47.9, 64.9, 95.7, 22.6, 38.7, 35.4, 53.6, 49.6, 71.4, 68.2, 93.3, 92, 124, 149, 298, 524, 32, 51.5, 47.9, 75.7, 73.8, 101, 126, 216, 178, 250, 373, 642, 1288, 57, 86.7, 81, 107, 123, 168, 208, 233, 351, 803, 124, 179, 231, 322, 125, 166, 277, 417, 227, 312, 522, 291, 422, 1193, 514, 626, 1734, 768, 926, 1163, 1649, 2197, 3027, 390, 4101, 582, 5337, 835, 7134, 1264, 1718, 2330, 2713, 3185, 4433, 4299, 7440, 7230, 11670, 18750, 24770, np.nan, np.nan, np.nan, np.nan, np.nan],
                    'A': ['Area of Section \nA\n(cm2)', 16.5, 20.3, 24.3, 29.4, 32, 38.2, 39.7, 28, 47.2, 32, 54.8, 36.1, 51.3, 47.2, 31.6, 58.7, 53.4, 35.9, 68.8, 61.2, 41.8, 41.7, 57.8, 49.9, 65.4, 73, 86, 50.1, 69.4, 59.1, 77, 68.4, 86, 95, 109, 67.1, 86, 76.7, 95.1, 86, 105, 95, 114, 105, 126, 135, 170, 206, 83.7, 105, 95.2, 117, 108, 129, 139, 192, 155, 176, 231, 279, 348, 106, 131, 120, 130, 146, 161, 191, 180, 229, 304, 161, 180, 196, 218, 172, 188, 221, 252, 225, 248, 289, 256, 286, 437, 303, 323, 494, 346, 368, 399, 440, 486, 542, 283, 604, 317, 663, 347, 733, 400, 445, 500, 528.7, 557, 629.1, 620, 817.6, 743.7, 953.4, 1125.3, 1242.7, np.nan, np.nan, np.nan, np.nan, np.nan]}

UC_frame_dict = {'DESIGNATION': ['DESIGNATION', 'UC152X152X23', 'UC152X152X30', 'UC152X152X37', 'UC152X152X44', 'UC203X203X46', 'UC152X152X51', 'UC203X203X52', 'UC203X203X60', 'UC203X203X71', 'UC254X254X73', 'UC203X203X86', 'UC254X254X89', 'UC305X305X97', 'UC203X203X100', 'UC254X254X107', 'UC203X203X113', 'UC305X305X118', 'UC203X203X127', 'UC356X368X129', 'UC254X254X132', 'UC305X305X137', 'UC356X368X153', 'UC305X305X158', 'UC254X254X167', 'UC356X368X177', 'UC305X305X198', 'UC356X368X202', 'UC356X406X235', 'UC305X305X240', 'UC305X305X283', 'UC356X406X287', 'UC356X406X340', 'UC356X406X393', 'UC356X406X467', 'UC356X406X509', 'UC356X406X551', 'UC356X406X592', 'UC356X406X634', 'UC356X406X677', 'UC356X406X744', 'UC356X406X818', 'UC356X406X900', 'UC356X406X990', 'UC356X406X1086', 'UC356X406X1202', 'UC356X406X1299'],
                    'M': ['Mass per meter\nW\n(kg/m)', 23, 30, 37, 44, 46.1, 51.2, 52, 60, 71, 73.1, 86.1, 88.9, 96.9, 99.6, 107.1, 113.5, 117.9, 127.5, 129, 132, 136.9, 152.9, 158.1, 167.1, 177, 198.1, 201.9, 235.1, 240, 282.9, 287.1, 339.9, 393, 467, 509, 551, 592, 633.9, 677, 744, 818, 901, 990, 1086, 1202, 1299],
                    'D': ['Depth \nD\n(mm)', 152.4, 157.6, 161.8, 166, 203.2, 170.2, 206.2, 209.6, 215.8, 254.1, 222.2, 260.3, 307.9, 228.6, 266.7, 235, 314.5, 241.4, 355.6, 276.3, 320.5, 362, 327.1, 289.1, 368.2, 339.9, 374.6, 381, 352.5, 365.3, 393.6, 406.4, 419, 436.6, 446, 455.6, 465, 474.6, 483, 498, 514, 531, 550, 569, 580, 600],
                    'B': ['Width\nB\n(mm)', 152.2, 152.9, 154.4, 155.9, 203.6, 157.4, 204.3, 205.8, 206.4, 254.6, 209.1, 256.3, 305.3, 210.3, 258.8, 212.1, 307.4, 213.9, 368.6, 261.3, 309.2, 370.5, 311.2, 265.2, 372.6, 314.5, 374.7, 394.8, 318.4, 322.2, 399, 403, 407, 412.2, 416, 418.5, 421, 424, 428, 432, 437, 442, 448, 454, 471, 476],
                    'TW': ['Web Thk\nTw\n(mm)', 5.8, 6.5, 8, 9.5, 7.2, 11, 7.9, 9.4, 10, 8.6, 12.7, 10.3, 9.9, 14.5, 12.8, 16.3, 12, 18.1, 10.4, 15.3, 13.8, 12.3, 15.8, 19.2, 14.4, 19.1, 16.5, 18.4, 23, 26.8, 22.6, 26.6, 30.6, 35.8, 39.1, 42.1, 45, 47.6, 51.2, 55.6, 60.5, 65.9, 71.9, 78, 95, 100],
                    'TF': ['Flange Thk\nTf\n(mm)', 6.8, 9.4, 11.5, 13.6, 11, 15.7, 12.5, 14.2, 17.3, 14.2, 20.5, 17.3, 15.4, 23.7, 20.5, 26.9, 18.7, 30.1, 17.5, 25.3, 21.7, 20.7, 25, 31.7, 23.8, 31.4, 27, 30.2, 37.7, 44.1, 36.5, 42.9, 49.2, 58, 62.7, 67.5, 72.3, 77, 81.5, 88.9, 97, 106, 115, 125, 130, 140],
                    'RR': ['Root Radius\nr\n(mm)', 7.6, 7.6, 7.6, 7.6, 12.7, 7.6, 12.7, 12.7, 12.7, 20, 12.7, 20, 20, 12.7, 20, 12.7, 20, 12.7, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15.2, 20, 15.2, 20, 15.2, 15.2, 15.2, 15.2, 15.2, 15.2, 15.2, 15.2],
                    'HW': ['Depth between fillets\nd\n(mm)', 123.6, 123.6, 123.6, 123.6, 155.8, 123.6, 155.8, 155.8, 155.8, 185.7, 155.8, 185.7, 237.1, 155.8, 185.7, 155.8, 237.1, 155.8, 280.6, 185.7, 237.1, 280.6, 237.1, 185.7, 280.6, 237.1, 280.6, 280.6, 237.1, 237.1, 280.6, 280.6, 280.6, 280.6, 290, 280.6, 290, 280.6, 290, 290, 290, 289, 290, 289, 290, 290],
                    'IZ': ['Moment of Inertia Ixx\n(cm4)', 1250, 1748, 2210, 2703, 4605, 3227, 5296, 6162, 7655, 11643, 9486, 14504, 22504, 11335, 17747, 13338, 27927, 15474, 40591, 22765, 33070, 48935, 39002, 30234, 57464, 51159, 66607, 79431, 64458, 79127, 100221, 122889, 146964, 183349, 204500, 227284, 250200, 275191, 299400, 342100, 392000, 449600, 518600, 595000, 663600, 754600],
                    'IY': ['Moment of Inertia Iyy\n(cm4)', 400, 560, 706, 860, 1549, 1022, 1778, 2065, 2538, 3910, 3128, 4860, 7310, 3680, 5931, 4286, 9061, 4921, 14613, 7535, 10702, 17556, 12572, 9875, 20532, 16303, 23692, 30997, 20319, 24641, 38682, 46859, 55374, 67842, 75400, 82681, 90170, 98138, 106800, 119900, 135400, 152800, 173000, 195500, 228700, 254400],
                    'Rz': ['Radius of gyration Rx\n(cm4)', 6.54, 6.76, 6.85, 6.94, 8.82, 7.04, 8.91, 8.95, 9.18, 11.1, 9.28, 11.2, 13.4, 9.43, 11.3, 9.59, 13.6, 9.74, 15.6, 11.6, 13.7, 15.8, 13.9, 11.9, 15.9, 14.2, 16, 16.2, 14.5, 14.8, 16.5, 16.8, 17.1, 17.5, 17.8, 18, 18.2, 18.4, 18.6, 19, 19.4, 19.8, 20.3, 20.7, 20.830000000000002, 21.39],
                    'Ry': ['Radius of gyration Ry\n(cm4)', 3.7, 3.83, 3.87, 3.92, 5.11, 3.96, 5.16, 5.18, 5.28, 6.41, 5.33, 6.49, 7.65, 5.38, 6.55, 5.44, 7.73, 5.5, 9.39, 6.65, 7.8, 9.46, 7.87, 6.78, 9.51, 8.01, 9.57, 10.1, 8.13, 8.25, 10.3, 10.4, 10.5, 10.7, 10.8, 10.8, 10.9, 11, 11.1, 11.2, 11.4, 11.5, 11.7, 11.9, 12.23, 12.42],
                    'Zez': ['Elastic Modulus Ze,x\n(cm4)', 164, 222, 273, 326, 453, 379, 514, 588, 709, 916, 854, 1114, 1462, 992, 1331, 1135, 1776, 1282, 2283, 1648, 2064, 2704, 2385, 2092, 3121, 3010, 3556, 4170, 3657, 4332, 5093, 6048, 7015, 8399, 9172, 9977, 10760, 11597, 12400, 13740, 15250, 16930, 18860, 20910, 22882.8, 25153.3],
                    'Zey': ['Elastic Modulus  Ze,y\n(cm4)', 53, 73, 91, 110, 152, 130, 174, 201, 246, 307, 299, 379, 479, 350, 458, 404, 590, 460, 793, 577, 692, 948, 808, 745, 1102, 1037, 1265, 1570, 1276, 1530, 1939, 2326, 2721, 3292, 3625, 3951, 4284, 4629, 4992, 5552, 6197, 6920, 7729, 8623, 9711.3, 10689.1],
                    'Zpz': ['Plastic Modulus Ze,x\n(cm4)', 182, 248, 309, 372, 502, 438, 572, 660, 803, 1014, 981, 1246, 1612, 1153, 1507, 1333, 1977, 1521, 2502, 1892, 2316, 2987, 2700, 2446, 3478, 3460, 3994, 4709, 4267, 5125, 5835, 7022, 8245, 10025, 11030, 12099, 13140, 14258, 15340, 17170, 19250, 21590, 24270, 27180, 30020, 33250],
                    'Zpy': ['Plastic Modulus Ze,y\n(cm4)', 80, 112, 140, 169, 231, 199, 265, 306, 374, 467, 457, 577, 727, 535, 699, 619, 897, 705, 1200, 881, 1054, 1436, 1232, 1140, 1672, 1583, 1921, 2385, 1953, 2345, 2951, 3546, 4156, 5037, 5552, 6062, 6574, 7112, 7676, 8549, 9552, 10680, 11950, 13340, 15150, 16670],
                    'Buckling Parameter u': ['Buckling Parameter u', 0.84, 0.849, 0.848, 0.848, 0.848, 0.848, 0.849, 0.847, 0.853, 0.851, 0.85, 0.851, 0.851, 0.852, 0.849, 0.853, 0.851, 0.854, 0.845, 0.851, 0.851, 0.845, 0.852, 0.852, 0.845, 0.854, 0.845, 0.835, 0.854, 0.855, 0.835, 0.836, 0.837, 0.84, 0.84, 0.841, 0.842, 0.843, 0.843, 0.845, 0.846, 0.848, 0.85, 0.851, 0.842, 0.846],
                    'J1': ['Torsional Index x', 20.7, 16, 13.3, 11.5, 17.3, 10.1, 15.5, 13.8, 11.8, 16.3, 10.1, 13.9, 18.7, 8.94, 12, 8.04, 15.8, 7.32, 19.4, 10, 13.9, 16.7, 12.3, 8.3, 14.8, 10.1, 13.2, 11.9, 8.64, 7.58, 10.1, 8.77, 7.8, 6.81, 6.43, 6.01, 5.73, 5.43, 5.21, 4.88, 4.57, 4.27, 4.04, 3.8, 3.59, 3.42],
                    'Warping Constant\nH\n(dm6)': ['Warping Constant\nH\n(dm6)', 0.0212, 0.0308, 0.0399, 0.0499, 0.143, 0.061, 0.167, 0.197, 0.25, 0.563, 0.318, 0.717, 1.56, 0.386, 0.899, 0.464, 1.98, 0.549, 4.18, 1.19, 2.39, 5.11, 2.87, 1.64, 6.09, 3.88, 7.16, 9.54, 5.03, 6.36, 12.3, 15.5, 18.9, 24.3, 27.7, 31.1, 34.8, 38.8, 43.1, 50.2, 58.9, 69, 81.8, 96.4, 76.3, 94.5],
                    'J1.1': ['Torsional Constant \nJ\n(cm4)', 4.63, 10.5, 19.2, 31.7, 23.3, 48.8, 33.2, 49.1, 82.7, 66.1, 140, 114, 98.4, 214, 188, 311, 171, 435, 161, 341, 261, 261, 394, 661, 396, 758, 576, 834, 1307, 2084, 1474, 2391, 3611, 5905, 7396, 9381, 11360, 13920, 16430, 21380, 27810, 36350, 46890, 60390, 79230, 98140],
                    'A': ['Area of Section \nA\n(cm2)', 29.2, 38.3, 47.1, 56.1, 59.2, 65.2, 66.8, 76.9, 90.9, 95.2, 110, 115, 125, 127, 138, 145, 152, 163, 166, 170, 176, 196, 203, 215, 227, 254, 259, 301, 307, 362, 367, 434, 502, 596, 649, 703, 755, 809, 863, 948, 1043, 1148, 1262, 1384, 1530, 1650]}

UBP_frame_dict = {'DESIGNATION': ['DESIGNATION', 'UBP203X203X45', 'UBP203X203X54', 'UBP254X254X63', 'UBP254X254X71', 'UBP305X305X79', 'UBP254X254X85', 'UBP305X305X88', 'UBP305X305X95', 'UBP356X368X109', 'UBP305X305X110', 'UBP305X305X126', 'UBP356X368X133', 'UBP305X305X149', 'UBP356X368X152', 'UBP356X368X174', 'UBP305X305X186', 'UBP305X305X223'],
                    'M': ['Mass per meter\nW\n(kg/m)', 44.9, 53.9, 63, 71, 78.9, 85.1, 88, 94.9, 108.9, 110, 126.1, 133, 149.1, 152, 173.9, 186, 222.9],
                    'D': ['Depth \nD\n(mm)', 200.2, 204, 247.1, 249.7, 299.3, 254.3, 301.7, 303.7, 346.4, 307.9, 312.3, 352, 318.5, 356.4, 361.4, 328.3, 337.9],
                    'B': ['Width\nB\n(mm)', 205.9, 207.7, 256.6, 258, 306.4, 260.4, 307.8, 308.7, 371, 310.7, 312.9, 373.8, 316, 376, 378.5, 320.9, 325.7],
                    'TW': ['Web Thk\nTw\n(mm)', 9.5, 11.3, 10.6, 12, 11, 14.4, 12.4, 13.3, 12.8, 15.3, 17.5, 15.6, 20.6, 17.8, 20.3, 25.5, 30.3],
                    'TF': ['Flange Thk\nTf\n(mm)', 9.5, 11.4, 10.7, 12, 11.1, 14.3, 12.3, 13.3, 12.9, 15.4, 17.6, 15.7, 20.7, 17.9, 20.4, 25.6, 30.4],
                    'RR': ['Root Radius\nr\n(mm)', 10.2, 10.2, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 2, 20],
                    'HW': ['Depth between fillets\nd\n(mm)', 160.8, 160.8, 185.7, 185.7, 237.1, 185.7, 237.1, 237.1, 280.6, 237.1, 237.1, 280.6, 237.1, 280.6, 280.6, 273.1, 237.1],
                    'IZ': ['Moment of Inertia IXx\n(cm4)', 4100, 5027, 9097, 10307, 16700, 12521, 18680, 20300, 30977, 23818, 27663, 38329, 33322, 44317, 51355, 42254, 52954],
                    'IY': ['Moment of Inertia Iyy\n(cm4)', 1384, 1705, 3019, 3442, 5329, 4219, 5987, 6531, 10989, 7712, 9005, 13683, 10914, 15880, 18467, 14138, 17583],
                    'Rz': ['Radius of gyration Rx\n(cm4)', 8.46, 8.55, 10.5, 10.6, 12.8, 10.6, 12.8, 12.9, 14.9, 13, 13.1, 15, 13.2, 15.1, 15.2, 13.4, 13.6],
                    'Ry': ['Radius of gyration Ry\n(cm4)', 4.92, 4.98, 6.06, 6.1, 7.23, 6.18, 7.26, 7.3, 8.85, 7.38, 7.45, 8.95, 7.55, 9.02, 9.1, 7.76, 7.85],
                    'Zez': ['Elastic Modulus Ze,x\n(cm4)', 410, 493, 736, 826, 1116, 985, 1238, 1337, 1789, 1547, 1772, 2178, 2092, 2487, 2842, 2574, 3134],
                    'Zey': ['Elastic Modulus  Ze,y\n(cm4)', 134, 164, 235, 267, 348, 324, 389, 423, 592, 496, 576, 732, 691, 845, 976, 881, 1080],
                    'Zpz': ['Plastic Modulus Ze,x\n(cm4)', 459, 557, 822, 926, 1238, 1115, 1380, 1494, 1979, 1740, 2005, 2428, 2390, 2789, 3208, 2977, 3673],
                    'Zpy': ['Plastic Modulus Ze,y\n(cm4)', 206, 252, 362, 411, 533, 500, 597, 649, 904, 763, 887, 1120, 1068, 1295, 1499, 1363, 1682],
                    'Buckling Parameter u': ['Buckling Parameter u', 0.827, 0.827, 0.831, 0.83, 0.834, 0.828, 0.832, 0.832, 0.825, 0.831, 0.83, 0.823, 0.829, 0.823, 0.822, 0.826, 0.827],
                    'J': ['Torsional Index x', 18.6, 15.8, 18.9, 17.2, 22.8, 14.8, 20.8, 19.5, 23.4, 17.2, 15.3, 19.7, 13.2, 17.5, 15.5, 11.5, 9.41],
                    'Warping Constant\nH\n(dm6)': ['Warping Constant\nH\n(dm6)', 0.126, 0.158, 0.422, 0.486, 1.11, 0.608, 1.25, 1.38, 3.06, 1.65, 1.96, 3.87, 2.42, 4.55, 5.37, 3.24, 4.16],
                    'J.1': ['Torsional Constant \nJ\n(cm4)', 19.2, 32.7, 41.1, 56.5, 52.2, 92.6, 70.3, 86.9, 91.2, 131, 193, 160, 310, 235, 345, 520, 977],
                    'A': ['Area of Section \nA\n(cm2)', 57.2, 68.7, 82.3, 92.4, 102, 110, 114, 122, 140, 142, 162, 171, 191, 195, 223, 235, 285]}




# dict for frame section
# materialfile = open('$ FRAME SECTIONS', 'r')
materialfilelines = dict1['$ FRAME SECTIONS']
Name = []
Material = []
Shape = []
t3 = []
t2 = []
tf = []
tw = []
twb = []
t2b = []
tfb = []
dis = []
Embedded_Section = []
Fill_Material = []
Radius = []
Mirror_About_2_axis = []
Mirror_About_3_axis = []
Lip_Depth = []
Lip_Angle = []

for i in range(len(materialfilelines)):
    materiallines = re.sub(' +', ' ', materialfilelines[i])
    materiallineslist = materiallines.split()
    if materiallineslist[0] != '$':
        for j in range(len(materiallineslist)):
            if materiallineslist[j] == 'FRAMESECTION':
                if materiallineslist[j + 1].endswith('"'):
                    framsec = materiallineslist[j + 1]
                else:
                    framsec = ''
                    for k in range(1, len(materiallineslist)):
                        if materiallineslist[j + k].endswith('"'):
                            framsec += materiallineslist[j + k]
                            break
                        else:
                            framsec += materiallineslist[j + k] + ' '
                Name.append(framsec.strip('"'))
            elif materiallineslist[j] == 'MATERIAL':
                material = materiallineslist[j + 1]
                Material.append(material.strip('"'))
            elif materiallineslist[j] == 'SHAPE':
                if materiallineslist[j + 1].endswith('"'):
                    shape = materiallineslist[j + 1]
                else:
                    shape = ''
                    for k in range(1, len(materiallineslist)):
                        if materiallineslist[j + k].endswith('"'):
                            shape += materiallineslist[j + k]
                            break
                        else:
                            shape += materiallineslist[j + k] + ' '
                shape = shape.strip('"')
                Shape.append(shape)
                if 'D' not in materiallineslist: 
                    if shape.startswith('UBP') or shape.startswith('UC') or shape.startswith('UB'):
                        if shape.startswith('UBP'):
                            fram_dict = UBP_frame_dict
                        elif shape.startswith('UC'):
                            fram_dict = UC_frame_dict
                        elif shape.startswith('UB'):
                            fram_dict = UB_frame_dict
                        index_val = fram_dict['DESIGNATION'].index(shape)
                        d = fram_dict['D'][index_val]
                        t3.append(d)
                        b = fram_dict['B'][index_val]
                        t2.append(b)
                        t2b.append(b)
                        tf_1 = fram_dict['TF'][index_val]
                        tf.append(tf_1)
                        tfb.append(tf_1)
                        tw_1 = fram_dict['TW'][index_val]
                        tw.append(tw_1)
                        twb.append(tw_1)
                        break


            elif materiallineslist[j] == 'D':
                d = materiallineslist[j + 1]
                t3.append(d.strip('"'))
                if 'B' not in materiallineslist:                    
                    t2.append(0)
                    if 'BB' not in materiallineslist:
                        t2b.append(0)
                    if 'TF' not in materiallineslist:
                        tf.append(0)
                        if 'TFB' not in materiallineslist:
                            tfb.append(0)
                    if 'TW' not in materiallineslist:
                        tw.append(0)
                        if 'TWB' not in materiallineslist:
                            twb.append(0)
            elif materiallineslist[j] == 'B':
                b = materiallineslist[j + 1]
                t2.append(b.strip('"'))
                if 'BB' not in materiallineslist:
                    t2b.append(b)
                if 'TF' not in materiallineslist:
                    tf.append(0)
                    if 'TFB' not in materiallineslist:
                        tfb.append(0)
                if 'TW' not in materiallineslist:
                    tw.append(0)
                    if 'TWB' not in materiallineslist:
                        twb.append(0)
            elif materiallineslist[j] == 'BB':
                bb = materiallineslist[j + 1]
                t2b.append(bb.strip('"'))
            elif materiallineslist[j] == 'TF':
                tf_1 = materiallineslist[j + 1]
                tf.append(tf_1.strip('"'))
                if 'TFB' not in materiallineslist:
                    tfb.append(tf_1)
            elif materiallineslist[j] == 'TW':
                tw_1 = materiallineslist[j + 1]
                tw.append(tw_1.strip('"'))
                if 'TWB' not in materiallineslist:
                    twb.append(tw_1.strip('"'))
            elif materiallineslist[j] == 'TWB':
                twb_1 = materiallineslist[j + 1]
                twb.append(twb_1.strip('"'))
            elif materiallineslist[j] == 'TFB':
                tfb_1 = materiallineslist[j + 1]
                tfb.append(tfb_1.strip('"'))
            elif materiallineslist[j] == 'DIS':
                dis_1 = materiallineslist[j + 1]
                dis.append(dis_1.strip('"'))
            elif materiallineslist[j] == 'EMBEDDEDSECTION':
                embeddedsection_1 = materiallineslist[j + 1]
                Embedded_Section.append(embeddedsection_1.strip('"'))
            elif materiallineslist[j] == 'FILLMATERIAL':
                filmaterial_1 = materiallineslist[j + 1]
                Fill_Material.append(filmaterial_1.strip('"'))
            elif materiallineslist[j] == 'R' or materiallineslist[j] == 'RAD':
                r_1 = materiallineslist[j + 1]
                Radius.append(r_1.strip('"'))
            elif materiallineslist[j] == 'MIRROR2':
                mirror2 = materiallineslist[j + 1]
                Mirror_About_2_axis.append(mirror2.strip('"'))
            elif materiallineslist[j] == 'MIRROR3':
                mirror3 = materiallineslist[j + 1]
                Mirror_About_3_axis.append(mirror3.strip('"'))
            elif materiallineslist[j] == 'LIP':
                lip_1 = materiallineslist[j + 1]
                Lip_Depth.append(lip_1)
            elif materiallineslist[j] == 'ANG':
                ang_1 = materiallineslist[j + 1]
                Lip_Angle.append(ang_1)

frame_dict = {'NAME': Name, 'MATERIAL': Material, 'SHAPE': Shape, 'T3': t3, 'T2': t2,
                'TF': tf, 'TW': tw, 'TWB': twb, 'T2B': t2b, 'TFB': tfb}
# for i,j in frame_dict.items():
#     print(i,len(j))
# fram_dict_df = pd.DataFrame(frame_dict)


# dict for only frame section with 'Steel I/Wide Flange' shape
section_name1 = []
shape = []
# materialfile = open('$ FRAME SECTIONS', 'r')
materialfilelines = dict1['$ FRAME SECTIONS']
read_frsec = materialfilelines
for i in range(len(read_frsec) - 1):
    systematic_form = re.sub(" +", " ", read_frsec[i])
    lnconlist = systematic_form.split('"')
    if '$' not in lnconlist[0]:
        if 'Steel I/Wide Flange' == lnconlist[5] or lnconlist[1].startswith('UBP') or lnconlist[1].startswith('UC') or lnconlist[1].startswith('UB') :
            section_name1.append(lnconlist[1])
            shape.append(lnconlist[5])
df_frsec_dict = {'Section name': section_name1, 'Shape': shape}
# for i,j in df_frsec_dict.items():
#     print(i,len(j))

# dict for line assign
beam_label = []
storey_name = []
section_name = []
release_type = []
beam_label1 = []
storey_name1 = []
section_name1 = []
release_type1 = []
P = []
V2 = []
V3 = []
T = []
M2 = []
M3 = []
listofstorey = []
beamlabel12 = []

# file_linass = open("$ LINE ASSIGNS", "r")
read_linass = dict1['$ LINE ASSIGNS']
for storey in listof_storey:
    for type in ['C', 'B', 'D']:
        beam_lab = []
        for i in range(len(read_linass)):
            systematic_form = re.sub(" +", " ", read_linass[i])
            lnconlist = systematic_form.split('"')
            # print(storey,lnconlist[3])
            # print(type,lnconlist[1][0])
            if '$' not in lnconlist[0] and 'PINNED' not  in lnconlist  and lnconlist[5] in df_frsec_dict[
                'Section name'] and 'M3I M3J' not in lnconlist and storey == lnconlist[
                3] and type == lnconlist[1][0]:
                for j in range(len(lnconlist)):
                    if lnconlist[j] == ' LINEASSIGN ':
                        beam_lab.append(lnconlist[j + 1])
                        # beam_label.append(lnconlist[j + 1])
                        storey_name.append(lnconlist[j + 3])
                    elif lnconlist[j] == ' SECTION ':
                        section_name.append(lnconlist[j + 1])
                        if ' RELEASE ' not in lnconlist:
                            release_type.append('')
                    elif lnconlist[j] == ' RELEASE ':
                        release_type.append(lnconlist[j + 1])
                        if lnconlist[j + 1] == "PI PJ V2I V2J V3I V3J TI TJ M2I M2J M3I M3J":
                            P.append('Both')
                            V2.append('Both')
                            V3.append('Both')
                            T.append('Both')
                            M2.append('Both')
                            M3.append('Both')
                        else:
                            P.append('None')
                            V2.append('None')
                            V3.append('None')
                            T.append('None')
                            if lnconlist[7] == "M2J M3J":
                                M2.append('End J')
                                M3.append('End J')
                            elif lnconlist[7] == "M2I M3I":
                                M2.append('End I')
                                M3.append('End I')
                            elif lnconlist[7] == "PINNED":
                                M2.append('Both')
                                M3.append('Both')

            if '$' not in lnconlist[0]:
                for j in range(len(lnconlist)):
                    if lnconlist[j] == ' LINEASSIGN ':
                        beam_label1.append(lnconlist[j + 1])
                        storey_name1.append(lnconlist[j + 3])
                    elif lnconlist[j] == ' SECTION ':
                        section_name1.append(lnconlist[j + 1])
                        if ' RELEASE ' not in lnconlist:
                            release_type1.append('')
                    elif lnconlist[j] == ' RELEASE ':
                        release_type1.append(lnconlist[j + 1])

        beamlabel12.extend(beam_lab)
        beam_lab1 = list(map(lambda x: int(x[1:]), beam_lab))
        beam_lab1.sort()
        beam_lab2 = list(map(lambda x: type + str(x), beam_lab1))            
        beam_label.extend(beam_lab2)



df_linassgn_dict = {'Beam label': beam_label, 'Storey': storey_name, 'Section': section_name,
                    'Release type': release_type}
df_linassgn1_dict = {'Beam label': beam_label1, 'Storey': storey_name1, 'Section': section_name1,
                        'Release type': release_type1}
df_linassgn2_dict = {'Beam label': beamlabel12, 'Storey': storey_name, 'Section': section_name,
                    'Release type': release_type}
# for i,j in df_linassgn_dict.items():
#     print(i,len(j))
# for i,j in df_linassgn1_dict.items():
#     print(i,len(j))
# for i,j in df_linassgn2_dict.items():
#     print(i,len(j))


df_linassgn = pd.DataFrame(df_linassgn2_dict)
# df_linassgn1 = pd.DataFrame(df_linassgn1_dict)





# dict for line connectivities
beam_label1 = []
beamlist = []
columnlist = []
bracelist = []
beam_type = []
Point1 = []
Point2 = []
columnjunc = []
# file_linconn = open("$ LINE CONNECTIVITIES", "r")
read_linconn = dict1["$ LINE CONNECTIVITIES"]
# file_areaconn = open("$ AREA CONNECTIVITIES", "r")
# read_areaconn = dict1["$ AREA CONNECTIVITIES"]
for i in range(len(read_linconn)):
    systematic_form = re.sub(" +", " ", read_linconn[i])
    lnconlist = systematic_form.split('"')
    if '$' not in lnconlist[0]:
        beam_label1.append(lnconlist[1])
        beam_type.append(lnconlist[2].strip())
        Point1.append(int(lnconlist[3]))
        Point2.append(int(lnconlist[5]))
        if lnconlist[2].strip() == 'BEAM' and lnconlist[1] in df_linassgn_dict['Beam label']:
            beamlist.append(lnconlist[1])
        elif lnconlist[2].strip() == 'COLUMN' and lnconlist[1] in df_linassgn_dict['Beam label']:
            columnlist.append(lnconlist[1])
            columnjunc.append(int(lnconlist[3]))
        else:
            bracelist.append(lnconlist[1])
df_linconn_dict = {'Beam label': beam_label1, 'Beam Type': beam_type, 'Point1': Point1, 'Point2': Point2}


# dict for pt coord
POINT = []
Coordx = []
Coordy = []
Coordz = []
# file_ptcoord = open("$ POINT COORDINATES", "r")
read_ptcoord = dict1["$ POINT COORDINATES"]
for i in range(len(read_ptcoord)):
    systematic_form = re.sub(" +", " ", read_ptcoord[i])
    lnconlist = systematic_form.split()
    if '$' not in lnconlist[0]:
        POINT.append(int(lnconlist[1].strip('"')))
        Coordx.append(float(lnconlist[2]))
        Coordy.append(float(lnconlist[3]))
        if len(lnconlist) > 4:
            Coordz.append(float(lnconlist[4]))
        else:
            Coordz.append('')
df_ptcoord_dict = {'Point': POINT, 'Coordx': Coordx, 'Coordy': Coordy, 'Coordz': Coordz}


dictof_beamstoreywise = {}

totalliststorey = df_linassgn_dict['Storey']
totallistbeams = df_linassgn_dict['Beam label']

df_linassgn2 = []

dictof_beamstoreywise = {}
for storey in range(len(listof_storey)):
    floor_name = listof_storey[storey]
    beamlist_I = []
    columnlist_I = []
    bracelist_I = []
    beamlist_I_I = []
    columnlist_I_I = []
    bracelist_I_I = []
    beamlist_I_J = []
    columnlist_I_J = []
    bracelist_I_J = []
    beamlist_I_N = []
    columnlist_I_N = []
    bracelist_I_N = []

    for index in range(len(totalliststorey)):
        if totalliststorey[index] == floor_name:
            if df_linassgn_dict['Beam label'][index] in beamlist:
                beamlist_I.append(df_linassgn_dict['Beam label'][index])
                if 'M3I' in df_linassgn_dict['Release type'][index]:
                    beamlist_I_I.append(df_linassgn_dict['Beam label'][index])
                elif 'M3J' in df_linassgn_dict['Release type'][index]:
                    beamlist_I_J.append(df_linassgn_dict['Beam label'][index])
                else:
                    beamlist_I_N.append(df_linassgn_dict['Beam label'][index])


            elif df_linassgn_dict['Beam label'][index] in columnlist:
                columnlist_I.append(df_linassgn_dict['Beam label'][index])
                if 'M3I' in df_linassgn_dict['Release type'][index]:
                    columnlist_I_I.append(df_linassgn_dict['Beam label'][index])
                elif 'M3J' in df_linassgn_dict['Release type'][index]:
                    columnlist_I_J.append(df_linassgn_dict['Beam label'][index])
                else:
                    columnlist_I_N.append(df_linassgn_dict['Beam label'][index])

            else:
                bracelist_I.append(df_linassgn_dict['Beam label'][index])
                if 'M3I' in df_linassgn_dict['Release type'][index]:
                    bracelist_I_I.append(df_linassgn_dict['Beam label'][index])
                elif 'M3J' in df_linassgn_dict['Release type'][index]:
                    bracelist_I_J.append(df_linassgn_dict['Beam label'][index])
                else:
                    bracelist_I_N.append(df_linassgn_dict['Beam label'][index])
    print("line = ",totalliststorey)
    dictof_beamstorey = {floor_name + 'BEAM': beamlist_I,
                            floor_name + 'M3I' + 'BEAM': beamlist_I_I +  beamlist_I_N,
                            floor_name + 'M3J' + 'BEAM': beamlist_I_J + beamlist_I_N,
                            floor_name + 'COLUMN': columnlist_I,
                            floor_name + 'M3I' + 'COLUMN': columnlist_I_I + columnlist_I_N,
                            floor_name + 'M3J' + 'COLUMN': columnlist_I_J + columnlist_I_N,
                            floor_name + 'BRACE': bracelist_I,
                            floor_name + 'M3I' + 'BRACE': bracelist_I_I + bracelist_I_N,
                            floor_name + 'M3J' + 'BRACE': bracelist_I_J + bracelist_I_N}

    x = dictof_beamstoreywise.update(dictof_beamstorey)

    
# for i, j in dictof_beamstoreywise.items():
#     print(i, j)
